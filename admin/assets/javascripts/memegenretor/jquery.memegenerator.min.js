(function(c) {
    var b = {
        topTextPlaceholder: "TOP TEXT",
        bottomTextPlaceholder: "BOTTOM TEXT",
    };
    var a = function(e, d) {
        var f = this;
        this.settings = c.extend(true, {}, {
            defaultTextStyle: {
                color: "#FFFFFF",
                size: 42,
                font: "Open Sans",
                style: "normal",
                weight: "normal",
                forceUppercase: true
            },
            minFontSize: 1,
            maxFontSize: 128,
            fontSizeStep: 1,
            //borderWidthStep: 1,
            captions: [],
            previewMode: "canvas",
            outputFormat: "image/png",
            editingEnabled: true,
            dragResizeEnabled: true,
            drawingAboveText: true,
            showAdvancedSettings: true,
            colorPicker: null,
            wrapperClass: "mg-wrapper",
            toolboxSelector: null,
            layout: "vertical",
            useBootstrap: false,
            onLayerChange: function(g) {
                return true
            },
            onNewTextBox: function(g) {
                return true
            }
        }, d);
        
        this.userSettings = {
            forceUppercase: f.settings.defaultTextStyle.forceUppercase,
            dragResizeEnabled: f.settings.dragResizeEnabled,
            drawingAboveText: f.settings.drawingAboveText
        };
        this.element = e;
        this.wrapper;
        this.canvasContainer;
        this.helpersContainer;
        this.canvasLayers = [];
        this.originalSize = [];
        this.scale = 1;
        this.FONT_HEIGHT_MODIFIER = 0.1;
        this.save = function() {
            return f.canvas.save().toDataURL(f.settings.outputFormat)
        };
        this.saveCanvas = function() {
            return f.canvas.save()
        };
        this.download = function() {
            var g = c("<a></a>").attr("href", this.save()).attr("download", "test.png").appendTo(f.wrapper);
            g[0].click();
            g.remove()
        };
        this.init = function() {
            e.wrap('<div class="mg-wrapper"><div class="mg-image"></div></div>');
            f.wrapper = e.parent().parent();
            f.canvasContainer = c('<div class="mg-canvas"></div>').appendTo(f.wrapper.find("> .mg-image"));
            f.helpersContainer = c('<div class="mg-helpers"></div>').appendTo(f.wrapper.find("> .mg-image"));
            if (f.settings.layout == "horizontal") {
                f.wrapper.addClass("mg-horizontal-layout")
            }
            if (f.settings.previewMode == "css") {
                f.cssPreview.enable()
            }
            c("<img>").attr("src", e.attr("src")).load(function() {
                f.originalSize[0] = this.width;
                f.originalSize[1] = this.height;
                f.scale = e.width() / f.originalSize[0];
                if (f.settings.editingEnabled) {
                    f.wrapper.append(f.ui.createControls())
                }
                f.settings.captions.forEach(function(h, i) {
                    var g = f.wrapper.find(".mg-textbox-text").eq(i);
                    if (g.length == 0) {
                        g = f.ui.createTextBox("", "center center").insertAfter(f.wrapper.find(".mg-controls .mg-textbox").last()).find(".mg-textbox-text")
                    }
                    g.attr("value", h);
                    g.trigger("change")
                });
                if (f.settings.useBootstrap) {
                    f.ui.bootstrapify()
                }
            });
            c(window).on("resize", function() {
                f.scale = e.width() / f.originalSize[0];
                f.events.onLayerChange()
            })
        };
        this.ui = {
            createControls: function() {
                var g = c('<div class="mg-controls"></div>');
                g.append(f.ui.createTextBox(b.topTextPlaceholder, "top center"));
                g.append(f.ui.createTextBox(b.bottomTextPlaceholder, "bottom center"));
                return g
            },
            createTextBox: function(m, g) {
                var h = "layer" + (f.canvasLayers.length + 1);
                var k = f.originalSize[0];
                var l = f.settings.defaultTextStyle.size + Math.round(f.FONT_HEIGHT_MODIFIER * f.settings.defaultTextStyle.size);
                var j = f.ui._getBoxCoordinates(g, k, l);
                var i = c('<div class="mg-textbox '+h+'" data-layer="' + h + '" data-x="' + j[0] + '" data-y="' + j[1] + '" data-width="' + k + '" data-height="' + l + '"></div>');
                i.append(c('<input type="text" class="mg-textbox-text" placeholder="' + m + '">'));
                i.append(c('<select class=mg-textbox-font><option value="Open Sans">Open Sans</option><option value="Helvetica">Helvetica</option><option value="Georgia">Georgia</option><option value="Comic Sans MS">Comic Sans MS</option></select>'));
                i.append(c('<input type="number" class="mg-textbox-size" value="' + f.settings.defaultTextStyle.size + '" step="' + f.settings.fontSizeStep + '" min="' + f.settings.minFontSize + '" max="' + f.settings.maxFontSize + '">'));
                if (f.userSettings.forceUppercase) {
                    i.find(".mg-textbox-text").css("textTransform", "uppercase")
                    //i.find(".mg-textbox-text").css("font-style", "italic");
                    
                }
                if (f.settings.colorPicker != false) {
                    i.append('<input type="text" class="mg-textbox-text-color colorpicker" value="' + f.settings.defaultTextStyle.color + '">');
                    //i.append('<input type="text" class="mg-textbox-border-color colorpicker" value="' + f.settings.defaultTextStyle.borderColor + '">');
                    i.find(".colorpicker").wrap('<div class="colorpickerContainer"></div>');
                    f.ui._bindColorpicker(i.find(".colorpicker"))
                }
                if(h!='layer1'){
                i.append(c('</div><a role="button" class="btn btn-default mg-text-lowercase">abc</a>'));
                i.append(c('<a role="button" class="btn btn-default mg-text-uppercase">ABC</a>'));
                i.append(c('<a role="button" class="btn btn-default mg-text-bold">B</a>'));
                i.append(c('<a role="button" class="btn btn-default mg-text-italic">I</a>'));
                }
                f.canvasLayers.push(h);
                i.find(".mg-textbox-text").on("change keyup", function() {
                    if (f.userSettings.forceUppercase) {
                       c(this).val(f.ui._strtoupper(c(this).val()))
                    }
                    f.events.onLayerChange(h)
                });
                i.find(".mg-text-lowercase").on("click", function() {  
                        c('.layer1 .mg-textbox-text').val(f.ui._strtolower(c('.layer1 .mg-textbox-text').val()))
                        c('.layer2 .mg-textbox-text').val(f.ui._strtolower(c('.layer2 .mg-textbox-text').val()))
                        f.events.onLayerChange(h)
                });
                i.find(".mg-text-uppercase").on("click", function() {  
                        c('.layer1 .mg-textbox-text').val(f.ui._strtoupper(c('.layer1 .mg-textbox-text').val()))
                        c('.layer2 .mg-textbox-text').val(f.ui._strtoupper(c('.layer2 .mg-textbox-text').val()))
                        f.events.onLayerChange(h)
                });
                i.find(".mg-text-bold").on("click", function() {  
                        if(f.settings.defaultTextStyle.weight=='normal'){
                            f.settings.defaultTextStyle.weight='bold';
                            c(this).addClass('active');
                        }
                        else{
                            f.settings.defaultTextStyle.weight='normal';
                            c(this).removeClass('active');
                        }
                        f.events.onLayerChange(h)
                });
                i.find(".mg-text-italic").on("click", function() {  
                        if(f.settings.defaultTextStyle.style=='normal'){
                            f.settings.defaultTextStyle.style='italic';
                            c(this).addClass('active');
                        }
                        else{
                            f.settings.defaultTextStyle.style='normal';
                            c(this).removeClass('active');
                        }
                        f.events.onLayerChange(h)
                });
               
                i.find(".mg-textbox-font").on("change", function() {
                       f.settings.defaultTextStyle.font=this.value;
                       f.events.onLayerChange(h);
                });
                i.find(".mg-textbox-size").on("change", function() {
                        f.settings.defaultTextStyle.size=this.value;
                        f.events.onLayerChange(h)
                });
                if (f.userSettings.dragResizeEnabled) {
                    f.ui.createPositionHelper(i)
                }
                return i
            },
            createPositionHelper: function(i) {
                var g = i.data("layer");
                var h = c('<div class="draggable resizable" data-target-layer="' + g + '"></div>').appendTo(f.helpersContainer);
                h.css({
                    left: i.attr("data-x") * f.scale,
                    top: i.attr("data-y") * f.scale,
                    width: i.attr("data-width") * f.scale,
                    height: i.attr("data-height") * f.scale
                });
                h.draggable({
                    containment: f.wrapper.find("> .mg-image > img"),
                    drag: function(k, l) {
                        var j = f.wrapper.find("[data-layer='" + g + "']");
                        j.attr("data-x", l.position.left * (1 / f.scale));
                        j.attr("data-y", l.position.top * (1 / f.scale));
                        f.events.onLayerChange()
                    }
                });
                h.resizable({
                    containment: f.wrapper.find("> .mg-image > img"),
                    resize: function(k, l) {
                        var j = f.wrapper.find("[data-layer='" + g + "']");
                        j.attr("data-width", l.size.width * (1 / f.scale));
                        j.attr("data-height", l.size.height * (1 / f.scale));
                        f.events.onLayerChange()
                    }
                })
            },
            resizeHelpers: function() {
                f.helpersContainer.find("> div").each(function() {
                    var h = f.wrapper.find("[data-layer='" + c(this).attr("data-target-layer") + "']");
                    if (h.attr("data-width")) {
                        c(this).css("width", parseInt(h.attr("data-width"), 10) * f.scale)
                    }
                    if (h.attr("data-height")) {
                        c(this).css("height", parseInt(h.attr("data-height"), 10));
                        c(this).resizable("option", "minHeight", parseInt(h.attr("data-height"), 10));
                        c(this).resizable("option", "maxHeight", parseInt(h.attr("data-height"), 10))
                    }
                    if (h.attr("data-x") && h.attr("data-y")) {
                        c(this).css({
                            left: h.attr("data-x") * f.scale,
                            top: h.attr("data-y") * f.scale
                        })
                    }
                    if (parseInt(c(this).css("top"), 10) + c(this).outerHeight() > f.helpersContainer.height()) {
                        var g = f.helpersContainer.outerHeight() - c(this).outerHeight();
                        c(this).css("top", g);
                        h.attr("data-y", g * (1 / f.scale))
                    }
                })
            },
            destroyPositionHelpers: function() {
                f.helpersContainer.find("> div").remove()
            },
            bootstrapify: function() {
                var g = f.wrapper.find(".mg-controls");
                if (!f.wrapper.hasClass("usingBootstrap")) {
                    g.wrapInner('<div class="container-fluid"></div>')
                }
                f.wrapper.addClass("usingBootstrap");
                g.find(".mg-textbox").each(function() {
                    if (!c(this).hasClass("row")) {
                        c(this).addClass("row");
                        c(this).find(".mg-textbox-text").addClass("form-control").wrap(c("<div></div>").addClass("col-md-4"));
                        c(this).find(".mg-textbox-size").addClass("form-control").wrap(c("<div></div>").addClass("col-md-2"));
                        //c(this).find(".mg-textbox-border-width").addClass("form-control").wrap(c("<div></div>").addClass("col-md-2"));
                        c(this).find(".colorpicker").addClass("form-control");
                        c(this).find(".colorpickerContainer").addClass("col-md-2");
                        c(this).find(".colorpickerReplacer").addClass("btn btn-default")
                    }
                });
                if (!g.find(".mg-add-textbox").hasClass("btn")) {
                    g.find(".mg-add-textbox").addClass("btn btn-default btn-block").wrap(c("<div></div>").addClass("row"))
                }
            },
            _bindColorpicker: function(g) {
                if (f.settings.colorPicker == null && c.isFunction(c.fn.spectrum)) {
                    var h = function(i) {
                        c(this).val(i.toHexString());
                        c(this).attr("value", i.toHexString());
                        c(this).trigger("change");
                        f.events.onLayerChange(c(this).parent().data("layer"))
                    };
                    g.spectrum({
                        replacerClassName: "colorpickerReplacer",
                        change: h,
                        move: h
                    })
                } else {
                    if (f.settings.colorPicker == null) {
                        g.on("change keyup", function() {
                            c(this).attr("value", c(this).val());
                            f.events.onLayerChange(c(this).parent().data("layer"))
                        })
                    } else {
                        f.settings.colorPicker.call(this, f, g)
                    }
                }
            },
            _getBoxCoordinates: function(g, i, k) {
                var h = g.split(" ");
                var j = [];
                if (h.length == 2) {
                    switch (h[0]) {
                        case "center":
                            j[1] = parseInt(f.originalSize[1] / 2, 10);
                            break;
                        case "bottom":
                            j[1] = f.originalSize[1] - k;
                            break;
                        case "top":
                        default:
                            j[1] = 0;
                            break
                    }
                    switch (h[1]) {
                        case "center":
                            j[0] = parseInt(f.originalSize[0] / 2, 10) - parseInt(i / 2, 10);
                            break;
                        case "right":
                            j[0] = f.originalSize[0] - i;
                            break;
                        case "left":
                        default:
                            j[0] = 0;
                            break
                    }
                } else {
                    j[0] = j[1] = 0
                }
                return j
            },
            _normalizePosition: function(g) {
                return g * (1 + 1 - f.scale)
            },
            _strtoupper: function(g) {
                return g.toUpperCase()
            },
            _strtolower: function(g) {
                return g.toLowerCase()
            }
            
        };
        this.canvas = {
            drawLayers: function(g) {
                if (typeof g == "undefined") {
                    g = f.scale
                }
                f.canvasContainer.find("canvas:not(.mg-drawing-layer)").remove("");
                f.canvasLayers.forEach(function(i) {
                    var j = f.wrapper.find("[data-layer='" + i + "']");
                    if (j.hasClass("mg-textbox")) {
                        var l = {
                            text: j.find(".mg-textbox-text").val(),
                            x: j.attr("data-x") * g,
                            y: j.attr("data-y") * g,
                            maxWidth: j.attr("data-width") * g,
                            fontSize: j.find(".mg-textbox-size").val() * g,
                            font: j.find(".mg-textbox-font").val(),
                            color: j.find(".mg-textbox-text-color").val(),
                            style: f.settings.defaultTextStyle.style,
                            weight: f.settings.defaultTextStyle.weight,
                            
                        };
                        
                        var h = f.canvas.drawText(l.text, l.x, l.y, l.maxWidth, l.fontSize, l.font, l.color, l.style, l.weight, g);
                        
                        f.canvasContainer.append(h);
                        
                        var k = h.attr("data-text-lines") * l.fontSize;
                        j.attr("data-height", k + Math.round(f.FONT_HEIGHT_MODIFIER * k))
                    }
                });
                if (f.userSettings.drawingAboveText) {
                    f.canvasContainer.find("canvas.mg-drawing-layer").remove().insertAfter(f.canvasContainer.find(":last"))
                } else {
                    f.canvasContainer.find("canvas.mg-drawing-layer").remove().insertBefore(f.canvasContainer.find(":first"))
                }
            },
            drawText: function(t, q, o, s, v, j, m, k, h, l) {
                if (typeof l == "undefined") {
                    l = 1
                }
                                
                //console.log(v);
                var p = c("<canvas></canvas>").attr("width", f.originalSize[0] * l).attr("height", f.originalSize[1] * l);
                var n = p[0].getContext("2d");
                                
                n.font = k+' '+h+' '+ v + "px " + j;
                n.textAlign = "center";
                n.fillStyle = m;
                //n.strokeStyle = k;
                //n.lineWidth = h;
                var i = parseInt(q, 10) + parseInt(s, 10) / 2;
                var g = parseInt(o, 10) + parseInt(v, 10);
                var r = v;
                var u = f.canvas._wrapText(n, t, s);
                u.forEach(function(w, x) {
                    n.fillText(w, i, g + x * r);
                    n.strokeText(w, i, g + x * r)
                });
                p.attr("data-text-lines", u.length);
                return p
            },
            save: function() {
                var h = c("<canvas></canvas>").attr("width", f.originalSize[0]).attr("height", f.originalSize[1])[0];
                var g = h.getContext("2d");
                g.drawImage(e[0], 0, 0);
                f.canvas.drawLayers(1);
                f.canvasContainer.find("canvas").each(function() {
                    g.drawImage(this, 0, 0, f.originalSize[0], f.originalSize[1])
                });
                if (f.settings.previewMode == "canvas") {
                    f.canvas.drawLayers()
                } else {
                    f.canvas.clear()
                }
                return h
            },
            clear: function() {
                f.canvasContainer.find("canvas:not(.mg-drawing-layer)").remove("")
            },
            _wrapText: function(o, n, m) {
                var k = n.split(" ");
                var p = [];
                var l = k[0];
                for (var j = 1; j < k.length; j++) {
                    var g = k[j];
                    var h = o.measureText(l + " " + g).width;
                    if (h < m) {
                        l += " " + g
                    } else {
                        p.push(l);
                        l = g
                    }
                }
                p.push(l);
                return p
            }
        };
        this.cssPreview = {
            enable: function() {
                f.wrapper.find("> .mg-image").append('<div class="mg-css-preview"></div>')
            },
            disable: function() {
                f.wrapper.find("div.mg-css-preview").remove()
            },
            drawLayers: function() {
                var g = f.wrapper.find(".mg-css-preview");
                g.find("div").remove();
                f.canvasLayers.forEach(function(i) {
                    var j = f.wrapper.find("[data-layer='" + i + "']");
                    if (j.hasClass("mg-textbox")) {
                        var k = {
                            text: j.find(".mg-textbox-text").val(),
                            x: j.attr("data-x") * f.scale,
                            y: j.attr("data-y") * f.scale,
                            maxWidth: j.attr("data-width") * f.scale,
                            fontSize: j.find(".mg-textbox-size").val() * f.scale,
                            font: f.settings.defaultTextStyle.font,
                            color: j.find(".mg-textbox-text-color").attr("value"),
                            style: f.settings.defaultTextStyle.style,
                            weight: f.settings.defaultTextStyle.weight,
                        };
                        var h = f.cssPreview.drawText(k.text, k.x, k.y, k.maxWidth, k.fontSize, k.font, k.color, k.style, k.weight);
                        g.append(h);
                        j.attr("data-height", h.height() + Math.round(f.FONT_HEIGHT_MODIFIER * h.height()))
                    }
                })
            },
            drawText: function(o, m, l, n, p, i, k, j, g) {
                var h = c("<div></div>").html(o);
                h.css({
                    left: m,
                    top: l,
                    width: n,
                    minHeight: p,
                    fontSize: p,
                    fontFamily: i,
                    color: k,
                    textAlign: "center",
                    lineHeight: p + "px",
                    
                });
                return h
            }
        };
        
        this.events = {
            onLayerChange: function(g) {
                if (f.settings.previewMode == "canvas") {
                    f.canvas.drawLayers()
                } else {
                    if (f.settings.previewMode == "css") {
                        f.cssPreview.drawLayers()
                    }
                }
                f.ui.resizeHelpers();
                f.settings.onLayerChange.call(f, g)
            }
        }
    };
    c.fn.memeGenerator = function(d) {
        var i = (typeof d === "string") ? d : undefined;
        if (i) {
            var h = [];
            var f = (arguments.length > 1) ? Array.prototype.slice.call(arguments, 1) : undefined;
            var g = [];
            this.each(function() {
                var k = c(this);
                var j = k.data("memeGenerator");
                h.push(j)
            });
            this.each(function(l) {
                var k = h[l];
                if (!k) {
                    g.push(undefined);
                    return
                }
                if (typeof k[i] === "function") {
                    var j = k[i].apply(k, f);
                    g.push(j)
                } else {
                    console.warn('$.fn.memeGenerator: Undefined method "' + i + '"')
                }
            });
            return (g.length > 1) ? g : g[0]
        } else {
            var e = (typeof d === "object") ? d : undefined;
            return this.each(function() {
                var k = c(this);
                var j = new a(k, e);
                j.init();
                k.data("memeGenerator", j)
            })
        }
    }
}(jQuery));